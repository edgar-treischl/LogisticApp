library(ggforce)
library(ggplot2)
library(palmerpenguins)
library(patchwork)
#The gapminder data
library(gapminder)
head(gapminder)
#Create a smaller data frame
gapminder_07 <- gapminder |>
filter (year == 2007 & continent != "Oceania") |>
mutate(population = pop/1000000,
gdp = gdpPercap/1000)
#Minimal code for a scatter plot
ggplot(gapminder_07, aes(x=gdp, y=lifeExp)) +
geom_point()
#Left plot, the geom_histogram
ggplot(data=gapminder_07, aes(x=lifeExp)) +
geom_histogram()
#Right plot, the geom_density
ggplot(data=gapminder_07, aes(x=lifeExp)) +
geom_density()
#Minimal code for a scatter plot
ggplot(gapminder_07, aes(x=gdp, y=lifeExp)) +
geom_point()
#Left plot, the geom_histogram
ggplot(data=gapminder_07, aes(x=lifeExp)) +
geom_histogram()
#Right plot, the geom_density
ggplot(data=gapminder_07, aes(x=lifeExp)) +
geom_density()
#The data transformation step ...
count_continent <- gapminder_07 |>
count(continent)
count_continent
#And the bar graph
ggplot(data=gapminder_07, aes(x=continent)) +
geom_bar()
#geom_bar fills in the counting!
ggplot(data=gapminder_07) +
geom_bar(aes(x=continent, y=..count..))
#Minimal example for a scatter plot with geom_smooth
ggplot(gapminder_07, aes(x=gdp, y=lifeExp)) +
geom_point() +
geom_smooth()
#Linear fit
ggplot(gapminder_07, aes(x=gdp, y=lifeExp)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x)
#Add a quadratic term
ggplot(gapminder_07, aes(x=gdp, y=lifeExp)) +
geom_point() +
geom_smooth(method="lm", formula = y ~ poly(x, 2))
#Map with color
ggplot(gapminder_07, aes(x=gdp, y = lifeExp, color = continent)) +
geom_point()+
scale_color_manual(values=c("red", "gray", "gray", "gray"))
#Map with shapes
ggplot(gapminder_07, aes(x=gdp, y = lifeExp, shape = continent)) +
geom_point()+
scale_shape_manual(values=c(0, 2, 3, 14))
#Alpha
ggplot(gapminder_07, aes(x=gdp, y = lifeExp, color = continent)) +
geom_point(alpha = .5)
#Map with alpha
ggplot(gapminder_07, aes(x=gdp, y = lifeExp, alpha = continent)) +
geom_point()
#Include color
ggplot(gapminder_07, aes(x=gdp, y = lifeExp,
color = continent)) +
geom_point()
#Include color and size
ggplot(gapminder_07, aes(x=gdp, y = lifeExp,
color = continent,
size = population)) +
geom_point()
#A dot plot
ggplot(gapminder_07, aes(continent, lifeExp)) +
geom_point(size = 1)
#Add position_jitter
ggplot(gapminder_07, aes(continent, lifeExp)) +
geom_point(size = 1, position=position_jitter())
ggplot(gapminder_07, aes(continent, lifeExp)) +
geom_beeswarm(size = 1, cex = 3)+
stat_summary(fun = "median", colour = "red",
size = 1, geom = "point")
#library(palmerpenguins)
#Position stack is the default
ggplot(penguins, aes(species, fill = island))+
geom_bar(position = "stack")
#Position fill
ggplot(penguins, aes(species, fill = island))+
geom_bar(position = "fill")
#A messy density plot - how could we improve it?
ggplot(gapminder_07, aes(x=lifeExp, color=continent)) +
geom_density()
#facet_grid splits the graph by continent
ggplot(gapminder_07, aes(x=lifeExp)) +
geom_density()+
facet_grid(cols = vars(continent))
#Split by columns (on the vertical axis)
ggplot(gapminder_07, aes(x=lifeExp)) +
geom_density()+
ggtitle("A: facet_grid(cols = vars(x))")+
facet_grid(cols = vars(continent))
#Sply(FEHLER) by rows (on the horizontal)
ggplot(gapminder_07, aes(x=lifeExp)) +
geom_density()+
ggtitle("B: facet_grid(rows = vars(x))")+
facet_grid(rows = vars(continent))
#Split by facet_grid(row . column)
gapminder |>
filter (year == 1952 | year == 2007) |>
filter (continent != "Oceania") |>
ggplot(aes(x=lifeExp)) +
geom_density()+
facet_grid(year ~ continent)
#Vertical facet, but wrapped
gapminder |>
filter (continent == "Europe") |>
ggplot(aes(x=lifeExp)) +
geom_density()+
facet_wrap(year ~ ., nrow=2)
#Fake data for a pie chart ...
data<-tribble(
~fruits,   ~Percentage,
"Apples",   50.0,
"Bananas",  30.0,
"Cherries", 20.0
)
#Left, a bar plot
ggplot(data, aes(x="", y=Percentage, fill=fruits))+
geom_col(width = 1)
#Right, the bull's-eye chart
ggplot(data, aes(x="", y=Percentage, fill=fruits))+
geom_col(width = 1) +
coord_polar()
#Add theta = "y" to get a pie chart
ggplot(data, aes(x="", y=Percentage, fill=fruits))+
geom_col(width = 1, stat = "identity")+
coord_polar(theta = "y")
#The theme_void "finalizes" the pie chart
ggplot(data, aes(x="", y=Percentage, fill=fruits))+
geom_col(width = 1)+
coord_polar(theta = "y")+
theme_void()
gapminder
#Left plot: Never use xlim outside of the coordinate system!
#ERROR gapminder as DATA not gapminder_gapminder_07 + gdpPercap
#BOTH
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x)+
xlim(c(0,10000))+
ggtitle("xlim")
#Right plot
ggplot(gapminder, aes(x=gdpPercap, y=lifeExp)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x)+
coord_cartesian(xlim=c(0, 10000))+
ggtitle("coord_cartesian(xlim)")
ggplot(gapminder, aes(gdpPercap, lifeExp, color=continent))+
geom_point()+
facet_zoom(xlim = c(0, 10000))
ggplot(gapminder, aes(gdpPercap, lifeExp, color=continent))+
geom_point()+
facet_zoom(xlim = c(0, 10000))
#Shown in the book
library(viridis)
ggplot(gapminder_07, aes(gdpPercap, lifeExp, color=continent))+
geom_point()+
facet_zoom(xlim = c(0, 10000))+
theme_bw()+
scale_color_viridis(discrete = TRUE, name = "Region", option = "viridis")
#Chapter 12
library(dplyr)
library(dbplyr)
library(gapminder)
library(ggplot2)
library(ggrepel)
library(lubridate)
library(margins)
library(parameters)
library(titanic)
library(tibble)
library(shiny)
#Example data
df <- tribble(
~person, ~year, ~income,
1, 2019, 2000,
1, 2020, 2200,
2, 2019, 1977,
2, 2020, 1977,
3, 2019, 3500,
3, 2020, 3000
)
#Create a lag variable
df |>
group_by(person)|>
mutate(income_lag = lag(income))
#Use lubridate to prepare time and date variables
#library(lubridate)
x <- lakers$date[1]
x
# The ymd() function convert integers to a date
dates <- ymd(x)
dates
#Still an integer?
class(dates)
#Extract the day of a month
mday(dates)
#Extract month
month(dates)
#Extract years
year(dates)
#An example data preparation step
mtcars |>
group_by(cyl) |>
summarise(mpg = mean(mpg, na.rm = TRUE)) |>
arrange(desc(mpg))
#Establish a SQL connection to illustrates dbplyr
library(DBI)
library(dplyr, warn.conflicts = FALSE)
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbWriteTable(con, "mtcars", mtcars)
mtcars_sql <- tbl(con, "mtcars")
#Save the data preparation steps as an obejects
#library(dbplyr)
data_prep <- mtcars_sql |>
group_by(cyl) |>
summarise(mpg = mean(mpg, na.rm = TRUE)) |>
arrange(desc(mpg))
#Inspect the SQL query for the last data preparation step
data_prep |> show_query()
#The Titanic data
library(titanic)
#select variables
titanic_df <- titanic::titanic_train |>
dplyr::select(Survived, Sex, Age)
#inspect data
head(titanic_df)
#Minimal code to run a logistic regression
logit_model <- glm(Survived ~ Sex, family = binomial(link = 'logit'),
data = titanic_df)
#print a summary
summary(logit_model)
#Inspect odds ratios
logit_model|>
parameters::parameters(exponentiate = TRUE)
#Inspect marginal effects
logit_margins <- margins::margins(logit_model)
summary(logit_margins)
library(gapminder)
library(ggrepel)
#Left Plot: geom_text
gapminder %>% filter(year == "2007" & continent == "Europe") %>%
ggplot(aes(gdpPercap, lifeExp, label = country)) +
geom_point(color = "red")+
geom_text(size = 2) + #geom_text
labs(title = "A: geom_text()")
#Right plot: geom_text_repel
gapminder %>% filter(year == "2007" & continent == "Europe") %>%
ggplot(aes(gdpPercap, lifeExp, label = country)) +
geom_point(color = "red")+
coord_cartesian(clip = "off") +
geom_text_repel(size = 2) + #geom_text_repel
labs(title = "B: geom_text_repel()")
#Mastering Shiny:
PracticeR::show_link("master_shiny", browse = F)
library(gapminder)
library(ggrepel)
#Left Plot: geom_text
gapminder %>% filter(year == "2007" & continent == "Europe") %>%
ggplot(aes(gdpPercap, lifeExp, label = country)) +
geom_point(color = "red")+
geom_text(size = 2) + #geom_text
labs(title = "A: geom_text()")
#Right plot: geom_text_repel
gapminder %>% filter(year == "2007" & continent == "Europe") %>%
ggplot(aes(gdpPercap, lifeExp, label = country)) +
geom_point(color = "red")+
coord_cartesian(clip = "off") +
geom_text_repel(size = 2) + #geom_text_repel
labs(title = "B: geom_text_repel()")
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df_filter
df2 <- tibble::tibble(packages = needs)
df2
list_packages <- dplyr::setdiff(df2, df_filter)
allinstalled <- length(list_packages$packages)
validExamplesMsg <-
paste0(
"The following packages need to be installed: '",
paste(df2, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
}
check_installed("dplyr")
check_installed("waiter")
check <- check_installed("waiter")
check
list_packages <- dplyr::setdiff(df2, df_filter)
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df_filter
df2 <- tibble::tibble(packages = needs)
df2
list_packages <- dplyr::setdiff(df2, df_filter)
list_packages
}
check <- check_installed("waiter")
check
check_installed("waiter")
check_installed("ggplot2")
check <- check_installed("waiter")
check_installed("waiter")
check <- check_installed("waiter")
allinstalled <- length(check$packages)
allinstalled
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-
paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
check <- check_installed("ggplot2")
check
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-
paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
list <- c("ggplot2", "waiter")
purrr::map(list, check_installed)
purrr::map_df(list, check_installed)
list <- c("ggplot2", "dplyr")
purrr::map_df(list, check_installed)
list <- c("waiter", "dplyr")
purrr::map_df(list, check_installed)
check <- purrr::map_df(list, check_installed)
check
length(check$packages)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-
paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
remove.packages("beepr")
list <- c("waiter", "beepr")
check <- purrr::map_df(list, check_installed)
check
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-
paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df2 <- tibble::tibble(packages = needs)
list_packages <- dplyr::setdiff(df2, df_filter)
list_packages
}
list <- c("waiter", "beepr")
check <- purrr::map_df(list, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
list <- c("ggplot", "beepr")
check <- purrr::map_df(list, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df2 <- tibble::tibble(packages = needs)
list_packages <- dplyr::setdiff(df2, df_filter)
list_packages
}
list <- c("ggplot", "beepr")
check <- purrr::map_df(list, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
list <- c("ggplot", "beepr")
check <- purrr::map_df(list, check_installed)
check
purrr::map_df(list, check_installed)
list <- c("ggplot2", "beepr")
purrr::map_df(list, check_installed)
check <- purrr::map_df(list, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
list <- c("dplyr", "beepr")
check <- purrr::map_df(list, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
install.packages("beepr")
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df2 <- tibble::tibble(packages = needs)
list_packages <- dplyr::setdiff(df2, df_filter)
list_packages
}
input <- c("dplyr", "beepr")
check <- purrr::map_df(input, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
check_installed <- function(x) {
p <- installed.packages()
haves <- p[,1]
df <- tibble::tibble(packages = haves)
needs <- x
df_filter <- dplyr::filter(df, packages==needs)
df2 <- tibble::tibble(packages = needs)
list_packages <- dplyr::setdiff(df2, df_filter)
list_packages
}
input <- c("shiny", "ggplot2", "titanic", "viridis", "thematic",
"broom", "tidyverse", "ggalluvial", "waiter", "bslib")
check <- purrr::map_df(input, check_installed)
allinstalled <- length(check$packages)
plist <- check$packages
validExamplesMsg <-paste0(
"The following packages need to be installed: '",
paste(plist, collapse = "', '"),
"'")
if (allinstalled > 0) {
cli::cli_abort(validExamplesMsg)
}
shiny::runApp('~/Documents/GitHub/titanic-app')
shiny::runApp('~/Documents/GitHub/titanic-app')
shiny::runApp()
